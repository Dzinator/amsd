namespace amsd.model;

class AppointmentManagementSystem

{
     singleton;
     1 -> 0..* Person;
     1 -> 0..* Appointment;
     1 -> 0..* PatientProfile;
     1 -> 0..* DentistProfile;
     1 -> 0..* HygienistProfile;
}

 

 

class Person {
     name;
     
     before setName {
     if (aName == null || aName.trim().length() == 0) {
			return false; }
     }
     
     before constructor {
     	if(aName == null){
     		throw new IllegalArgumentException("Name cannot be null");
     	} else if (aName.trim().length() == 0) {
     		throw new IllegalArgumentException("Name cannot be empty");
     	}
     	if(!checkPhoneNumber(aPhoneNumber)){
     		throw new IllegalArgumentException("Phone number not vaild format");
     	}
     }
     
  	 phoneNumber;
  	 before setPhoneNumber {
  	 	checkPhoneNumber(aPhoneNumber);
  	 }
     1 -- 0..1 PatientProfile;
     1 -- 0..1 EmployeeProfile;
     
     
     public boolean checkPhoneNumber(String aPhoneNumber) {
     if (aPhoneNumber == null){
  	 		return false;
  	 	} else if (!(aPhoneNumber.matches("[0-9]+") && aPhoneNumber.length() >= 7)){
  	 		return false;
  	 	}
  	 return true;
  	 }
}

 

class PatientProfile

{

	before constructor {
		if(aPerson.hasPatientProfile()){
			throw new IllegalArgumentException("Person already has patient profile");
		}
	}


	depend amsd.controller.*;
     Integer missedAppointments;
     before setMissedAppointments {
     	if( aMissedAppointments < 0){
     		return false;
     	}
     }
     1 -- * Appointment;

	public Appointment getAppointment(Date date, int time){
	    for(Appointment app : getAppointments()){
		  if(Controller.datesEqual(app.getDate(),date) && app.getTime() == time){
			  return app;
		  }
		}
	  return null;
  	}
  	
  	sm{
  		Allowed{
  			miss (Appointment app) [missedAppointments >= 2] ->  NotAllowed;
  		}
  		NotAllowed{
  			payFee (Appointment app) [missedAppointments < 2] -> Allowed;
  		}
  	}
  	
  		before miss {
  			setMissedAppointments(getMissedAppointments() + 1); 
  			app.miss();
  		};
  		before payFee {
  			setMissedAppointments(getMissedAppointments() - 1);
  			app.payfee();
  		};

}

 

class EmployeeProfile

{

	before constructor {
		if(aPerson.hasEmployeeProfile()){
			throw new IllegalArgumentException("Person already has employee profile");
		}
	}
	
	
	depend amsd.controller.*;
     1 -- * Appointment;
     1 -- * Availability;
     
       public Availability getAvailability(Date date, int time){
    for(Availability avail : getAvailabilities()){
		  if(Controller.datesEqual(date,avail.getDate()) && avail.getTime() == time){
			  return avail;
		  }
		}
	  return null;
  }
  	
  	public Appointment getAppointment(Date date, int time){
	    for(Appointment app : getAppointments()){
		  if(Controller.datesEqual(app.getDate(),date) && app.getTime() == time){
			  return app;
		  }
		}
	  return null;
  	}

}

 

class DentistProfile

{

     isA EmployeeProfile;

}

 

class HygienistProfile

{

     isA EmployeeProfile;

}

 

class Appointment

{
	 final long twoDaysInMillis = 1000*60*60*24*2;
     Date date;
     Integer time;

  

    sm{

      Booked {
          cancel(long today) [date - today >= twoDaysInMillis] -> Canceled;
          miss -> Missed;
          attend -> Attended;
      }

      Canceled {
      	entry / {
	  		this.getAvailability().cancel();
      		//this.delete();
      	}
      }

      Attended {
      }

      Missed {
        payfee -> FeePaid;

      }

      FeePaid {
      }

    }
   /* 
     @Override
  public boolean equals(Object o){
	  if(!(o instanceof Appointment)){
		  return false;
	  }
	  
	  Appointment a = (Appointment) o;
	  return a.getDate().equals(this.getDate()) && a.getTime() == this.getTime() &&
			  a.getEmployeeProfile().equals(this.getEmployeeProfile()) &&
			  a.getPatientProfile().equals(this.getPatientProfile());
  }
  */

}

 

 

class Availability

{

 sm{
      Available{
        book(Appointment a) /{setAppointment(a);}-> Booked ;
      }

      Booked {
      	cancel -> Available;
      }
      
   }
     1 -- 0..1 Appointment;
     Date date;
     Integer time;
}